"use client";

import { Buffer } from "buffer";
import { Loader2, RefreshCw, Eye, EyeOff, Shield, Info } from "lucide-react";
import { useRouter } from "next/navigation";
import { useState, useEffect } from "react";
import { uniqueNamesGenerator, colors, animals, adjectives } from 'unique-names-generator';
import * as generator from 'generate-password';
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Slider } from "@/components/ui/slider";
import { connection } from "@/lib/solana";
import { useWalletStore } from "@/store/walletStore";
import { compressPublicKey } from "@/utils/bufferUtils";
import { getMultisigPDA } from "@/utils/credentialUtils";
import { hashRecoveryPhrase } from "@/utils/guardianUtils";
import { createWebAuthnCredential } from "@/utils/webauthnUtils";
import { saveWebAuthnCredentialMapping } from "@/lib/firebase/webAuthnService";
import { checkGuardianNameExists } from "@/lib/firebase/guardianService";
import { Switch } from "@/components/ui/switch";
import { 
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger 
} from "@/components/ui/tooltip";
import { LAMPORTS_PER_SOL, Transaction, SystemProgram } from '@solana/web3.js';
import { createFeePayerKeypair } from "@/lib/solana/keypairs";

export default function CreateWallet() {
  const router = useRouter();
  const [walletName, setWalletName] = useState("");
  const [recoveryPhrase, setRecoveryPhrase] = useState("");
  const [showPassword, setShowPassword] = useState(false);
  const [threshold, setThreshold] = useState(1);
  const MAX_ALLOWED_THRESHOLD = 8;
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState("");
  const [currentStep, setCurrentStep] = useState<"setup" | "review">("setup");
  const { setMultisigPDA, setWalletData } = useWalletStore();
  const [isCheckingName, setIsCheckingName] = useState(false);
  const [nameError, setNameError] = useState("");
  const [autoGenerated, setAutoGenerated] = useState(true);
  const feePayer = createFeePayerKeypair();

  // Tạo tên ví ngẫu nhiên
  const generateRandomName = () => {
    const randomName = uniqueNamesGenerator({
      dictionaries: [adjectives, colors, animals],
      separator: '',
      style: 'capital'
    });
    return randomName;
  };

  // Tạo mật khẩu ngẫu nhiên
  const generateRandomPassword = () => {
    return generator.generate({
      length: 18,
      numbers: true,
      symbols: true,
      uppercase: true,
      strict: true
    });
  };

  // Tạo dữ liệu tự động khi khởi tạo component
  useEffect(() => {
    if (autoGenerated) {
      const newName = generateRandomName();
      setWalletName(newName);
      setRecoveryPhrase(generateRandomPassword());
      checkDuplicateName(newName);
    }
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  // Làm mới tên ví và mật khẩu
  const refreshRandomData = () => {
    const newName = generateRandomName();
    setWalletName(newName);
    setRecoveryPhrase(generateRandomPassword());
    checkDuplicateName(newName);
  };
  
  const checkDuplicateName = async (name: string) => {
    if (!name) return;
    
    setIsCheckingName(true);
    setNameError("");
    
    try {
      const exists = await checkGuardianNameExists(name);
      if (exists) {
        setNameError("This guardian name already exists. Please choose another name.");
      }
    } catch (error) {
      console.error("Error checking name:", error);
    } finally {
      setIsCheckingName(false);
    }
  };

  const handleCreateWallet = async () => {
    try {
      setIsLoading(true);
      setError("");

      // Kiểm tra tên guardian trùng lặp
      const exists = await checkGuardianNameExists(walletName);
      if (exists) {
        setNameError("This guardian name already exists. Please choose another name.");
        setIsLoading(false);
        return;
      }

      // Kiểm tra ngưỡng ký không vượt quá MAX_ALLOWED_THRESHOLD
      const validThreshold = Math.min(threshold, MAX_ALLOWED_THRESHOLD);
      
      const result = await createWebAuthnCredential(walletName);
      const rawIdBase64 = Buffer.from(result.rawId).toString("base64");

      const multisigPDA = getMultisigPDA(rawIdBase64);

      // Kiểm tra IP trước khi tạo ví
      const checkIPResponse = await fetch('/api/wallet/check-ip', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          walletAddress: multisigPDA.toString()
        })
      });

      const checkIPData = await checkIPResponse.json();
      const canReceiveSOL = checkIPData.canReceiveSOL;

      const walletResponse = await fetch("/api/wallet/create", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          threshold: validThreshold,
          credentialId: rawIdBase64,
          name: walletName,
          multisigPDA: multisigPDA.toString(),
        }),
      });

      if (!walletResponse.ok) {
        const errorData = await walletResponse.json();
        throw new Error(
          `Failed to create wallet: ${errorData.error || "Unknown error"}`,
        );
      }

      const walletData = await walletResponse.json();
      await connection.confirmTransaction(walletData.signature);

      // Chỉ chuyển 10 SOL nếu IP chưa tạo ví
      if (canReceiveSOL) {
        // Tạo transaction chuyển 10 SOL
        const transaction = new Transaction().add(
          SystemProgram.transfer({
            fromPubkey: feePayer.publicKey,
            toPubkey: multisigPDA,
            lamports: 10 * LAMPORTS_PER_SOL,
          })
        );

        // Lấy blockhash mới nhất
        const { blockhash } = await connection.getLatestBlockhash();
        transaction.recentBlockhash = blockhash;
        transaction.feePayer = feePayer.publicKey;

        // Ký và gửi transaction
        transaction.sign(feePayer);
        const signature = await connection.sendRawTransaction(
          transaction.serialize()
        );

        // Xác nhận transaction
        await connection.confirmTransaction(signature);
      }

      const recoveryHashIntermediate = await hashRecoveryPhrase(recoveryPhrase);

      const uncompressedKeyBuffer = Buffer.from(result.publicKey, "hex");
      const compressedKeyBuffer = compressPublicKey(uncompressedKeyBuffer);

      // Thêm guardian chính (owner)
      const guardianResponse = await fetch("/api/guardian/add", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          guardianId: 1,
          guardianName: walletName || "Owner",
          recoveryHashIntermediate: Array.from(recoveryHashIntermediate),
          webauthnPubkey: Array.from(compressedKeyBuffer),
          webauthnCredentialId: rawIdBase64,
          multisigPDA: multisigPDA.toString(),
          isInitialOwner: true
        }),
      });

      if (!guardianResponse.ok) {
        const errorData = await guardianResponse.json();
        throw new Error(
          `Failed to add guardian: ${errorData.error || "Unknown error"}`,
        );
      }

      await guardianResponse.json();
      
      const webauthnMapping = {
              credentialId: rawIdBase64,
              walletAddress: multisigPDA.toString(),
              guardianPublicKey: Array.from(
                new Uint8Array(compressedKeyBuffer)
              ),
              guardianId: 1
            };

            localStorage.setItem('current_credential_id', rawIdBase64);

            localStorage.setItem(
              "webauthn_credential_" + rawIdBase64,
              JSON.stringify(webauthnMapping)
            );

      await saveWebAuthnCredentialMapping(
        rawIdBase64,             // credential ID
        multisigPDA.toString(),  // địa chỉ ví
        Array.from(new Uint8Array(compressedKeyBuffer)), // public key
        1,                       // guardianId = 1 (owner)
        walletName,              // Thêm walletName 
        validThreshold            // Thêm threshold
      );

      setMultisigPDA(multisigPDA.toString());
      setWalletData({
        walletName,
        threshold: validThreshold,
        guardianCount: 1, // Ban đầu chỉ có 1 guardian (owner)
        lastUpdated: Date.now(),
      });

      router.push("/dashboard");
    } catch (error) {
      setError(error instanceof Error ? error.message : "Unknown error");
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="min-h-[420px] rounded-lg border border-gray-200 bg-white shadow-sm">
      <div className="p-6">
        <div className="mb-6">
          <div className="flex items-center justify-between">
            <div className="flex space-x-2">
              <div
                className={`h-2 w-2 rounded-full ${currentStep === "setup" ? "bg-blue-500" : "bg-gray-200"}`}
              />
              <div
                className={`h-2 w-2 rounded-full ${currentStep === "review" ? "bg-blue-500" : "bg-gray-200"}`}
              />
            </div>
            <div className="text-sm text-gray-500">
              Step {currentStep === "setup" ? "1" : "2"} of 2
            </div>
          </div>
        </div>

          {currentStep === "setup" && (
          <div className="space-y-6">
            <div>
              <h2 className="mb-2 text-xl font-semibold">Name your wallet</h2>
              <p className="text-sm text-gray-500">
                Give your wallet a name to help you identify it
              </p>
            </div>

            <div className="space-y-4">
              <div>
                <div className="flex items-center justify-between mb-1.5">
                  <label className="block text-sm font-medium">
                  Wallet Name
                </label>
                    {autoGenerated && (
                              <Button 
                                variant="ghost" 
                                size="sm" 
                      className="text-xs text-blue-600 flex items-center gap-1 h-6 px-2"
                                onClick={refreshRandomData}
                              >
                      <RefreshCw className="h-3 w-3" />
                      Generate New
                              </Button>
                    )}
                  </div>
                <div className="flex space-x-2 items-center">
                  <div className="flex-1">
                <Input
                      placeholder="Enter wallet name"
                  value={walletName}
                  onChange={(e) => {
                    setWalletName(e.target.value);
                        checkDuplicateName(e.target.value);
                  }}
                  maxLength={32}
                      disabled={isLoading}
                      className="h-10"
                    />
                  </div>
                  <div className="flex items-center">
                    <Switch
                      id="auto-generate"
                      checked={autoGenerated}
                      onCheckedChange={(checked) => setAutoGenerated(checked)}
                    />
                  </div>
                </div>
                {nameError && (
                  <p className="text-sm text-red-500 mt-1">{nameError}</p>
                )}
                {isCheckingName && (
                  <p className="text-sm text-blue-500 mt-1">Checking name...</p>
                )}
              </div>

              <div>
                <div className="flex items-center justify-between mb-1.5">
                  <label className="block text-sm font-medium">
                    Recovery Key
                </label>
                  <TooltipProvider>
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <Button
                          variant="ghost"
                          size="sm"
                          className="rounded-full h-6 w-6 p-0 flex items-center justify-center"
                        >
                          <Info className="h-3.5 w-3.5" />
                        </Button>
                      </TooltipTrigger>
                      <TooltipContent>
                        <p className="text-xs">Use this key to recover your wallet if you lose access</p>
                      </TooltipContent>
                    </Tooltip>
                  </TooltipProvider>
                </div>
                <div className="flex space-x-2">
                  <div className="relative flex-1">
                <Input
                      placeholder="Enter recovery key"
                      value={recoveryPhrase}
                      onChange={(e) => setRecoveryPhrase(e.target.value)}
                      type={showPassword ? "text" : "password"}
                      disabled={isLoading}
                  maxLength={32}
                      className="h-10 pr-10"
                />
                    <button
                      type="button"
                      onClick={() => setShowPassword(!showPassword)}
                      className="absolute right-3 top-1/2 -translate-y-1/2 text-gray-400 hover:text-gray-600"
                    >
                      {showPassword ? (
                        <EyeOff className="h-4 w-4" />
                      ) : (
                        <Eye className="h-4 w-4" />
                      )}
                    </button>
                  </div>
                  </div>
              </div>

              <div>
                <div className="flex items-center justify-between">
                  <label className="mb-1.5 block text-sm font-medium">
                    Threshold
                  </label>
                  <span className="text-sm text-gray-500">
                    {threshold} signature{threshold > 1 ? "s" : ""} required
                  </span>
              </div>
              <Slider
                value={[threshold]}
                min={1}
                max={MAX_ALLOWED_THRESHOLD}
                step={1}
                onValueChange={(value) => setThreshold(value[0])}
                  disabled={isLoading}
                  className="py-4"
                />
                <p className="text-xs text-gray-500">
                  Number of signatures required to approve transactions
                </p>
              </div>
            </div>

            <div className="pt-4">
              <Button
                className="w-full h-10 bg-black text-white hover:bg-gray-800"
                onClick={() => setCurrentStep("review")}
                disabled={!walletName || !recoveryPhrase || isLoading || !!nameError}
              >
                Continue
              </Button>
            </div>
          </div>
        )}

        {currentStep === "review" && (
          <div className="space-y-6">
            <div>
              <h2 className="mb-2 text-xl font-semibold">Review details</h2>
              <p className="text-sm text-gray-500">
                Please confirm the wallet information
              </p>
            </div>

            <div className="space-y-4">
              <div className="rounded-lg border border-gray-100 bg-gray-50 p-4">
                <div className="grid grid-cols-2 gap-3 text-sm">
                  <div className="space-y-1">
                    <p className="text-gray-500">Wallet Name</p>
                    <p className="font-medium">{walletName}</p>
              </div>
                  <div className="space-y-1">
                    <p className="text-gray-500">Threshold</p>
                    <p className="font-medium">
                      {threshold} signature{threshold > 1 ? "s" : ""}
                    </p>
                </div>
                  <div className="col-span-2 space-y-1">
                    <div className="flex items-center justify-between">
                      <p className="text-gray-500">Recovery Key</p>
                      <button
                    type="button"
                    onClick={() => setShowPassword(!showPassword)}
                        className="text-gray-400 hover:text-gray-600 p-1 rounded-full"
                  >
                    {showPassword ? (
                          <EyeOff className="h-3.5 w-3.5" />
                        ) : (
                          <Eye className="h-3.5 w-3.5" />
                        )}
                      </button>
                    </div>
                    <p className="font-medium font-mono text-xs bg-white border border-gray-200 rounded px-2 py-1.5 break-all">
                      {showPassword ? recoveryPhrase : recoveryPhrase.replace(/./g, '•')}
                    </p>
                </div>
                </div>
            </div>

              <Alert className="border-amber-100 bg-amber-50 text-amber-800">
                <Shield className="h-4 w-4" />
                <AlertDescription>
                  <strong>Important:</strong> Make sure to save your username recovery key in a safe place. You&apos;ll need it to recover wallet accname
                </AlertDescription>
              </Alert>
            </div>

            <div className="flex gap-3 pt-2">
              <Button
                variant="outline"
                    onClick={() => setCurrentStep("setup")}
                disabled={isLoading}
                className="flex-1 h-10 bg-white text-black border border-gray-300 hover:bg-gray-50"
              >
                Go Back
              </Button>
              <Button
                onClick={handleCreateWallet}
                disabled={isLoading}
                className="flex-1 h-10 bg-black text-white hover:bg-gray-800"
              >
                {isLoading ? (
                  <span className="flex items-center gap-2">
                    <Loader2 className="h-4 w-4 animate-spin" />
                    Creating Wallet...
                  </span>
                ) : (
                  "Create Wallet"
                )}
              </Button>
            </div>
            
            {error && (
              <Alert variant="destructive">
                <AlertDescription>{error}</AlertDescription>
              </Alert>
            )}
          </div>
        )}
      </div>
    </div>
  );
}
